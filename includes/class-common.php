<?php
/**
 * Global functionality of the plugin.
 *
 * Defines the functionality loaded both on admin and frontend.
 *
 * @since      0.1.8
 * @package    ClassicPress_SEO
 * @subpackage ClassicPress_SEO\Core
 */

namespace ClassicPress_SEO;

use ClassicPress_SEO\Paper\Paper;
use ClassicPress_SEO\Traits\Ajax;
use ClassicPress_SEO\Traits\Meta;
use ClassicPress_SEO\Traits\Hooker;
use ClassicPress_SEO\Helpers\Arr;
use ClassicPress_SEO\Helpers\Str;
use ClassicPress_SEO\Helpers\Url;
use ClassicPress_SEO\Helpers\Param;

defined( 'ABSPATH' ) || exit;

/**
 * Common class.
 */
class Common {

	use Hooker, Ajax, Meta;

	/**
	 * Constructor method.
	 */
	public function __construct() {
		$this->action( 'admin_bar_menu', 'admin_bar_menu', 100 );
		$this->action( 'loginout', 'nofollow_link' );
		$this->filter( 'register', 'nofollow_link' );
		$this->filter( 'cpseo/excluded_taxonomies', 'default_excluded_taxonomies' );
		add_action( 'init', [ '\ClassicPress_SEO\Replace_Vars', 'setup' ], 99 );

		// Change Permalink for primary term.
		$this->filter( 'post_type_link', 'post_type_link', 9, 2 );
		$this->filter( 'post_link_category', 'post_link_category', 10, 3 );

		// Strip stopwords from slugs.
		if ( Helper::get_settings( 'general.cpseo_url_strip_stopwords' ) ) {
			$this->filter( 'get_sample_permalink', 'stopwords_default_permalink', 10, 3 );
		}

		// "Mark page as..." functionality in the top admin bar.
		$this->ajax( 'mark_page_as', 'mark_page_as' );

		add_action( 'wp_ajax_nopriv_cpseo_overlay_thumb', [ $this, 'generate_overlay_thumbnail' ] );

		// Auto-update the plugin.
		if ( Helper::get_settings( 'general.cpseo_enable_auto_update' ) ) {
			$this->filter( 'auto_update_plugin', 'auto_update_plugin', 10, 2 );
		}
	}

	/**
	 * Remove stopwords from the default permalink generated automatically.
	 *
	 * @param array  $permalink The permalink generated by WordPress.
	 * @param int    $post_id   The post ID.
	 * @param string $title     The title of the post.
	 *
	 * @return array
	 */
	public function stopwords_default_permalink( $permalink, $post_id, $title ) {

		if ( empty( $title ) ) {
			return $permalink;
		}

		// The second element is the slug.
		// Turn it to an array and strip stopwords by comparing against our array of stopwords.
		$new_slug_parts = array_diff( explode( '-', $permalink[1] ), $this->get_stopwords() );

		// Only change it if the resulting URL is at least 3 words long.
		if ( count( $new_slug_parts ) > 2 ) {
			$permalink[1] = join( '-', $new_slug_parts );
		}

		return $permalink;
	}

	/**
	 * Get stop words.
	 *
	 * @return array List of stop words.
	 */
	private function get_stopwords() {

		/* translators: this should be an array of stop words for your language, separated by comma's. */
		$stopwords = explode( ',', esc_html__( "a,about,above,after,again,against,all,am,an,and,any,are,as,at,be,because,been,before,being,below,between,both,but,by,could,did,do,does,doing,down,during,each,few,for,from,further,had,has,have,having,he,he'd,he'll,he's,her,here,here's,hers,herself,him,himself,his,how,how's,i,i'd,i'll,i'm,i've,if,in,into,is,it,it's,its,itself,let's,me,more,most,my,myself,nor,of,on,once,only,or,other,ought,our,ours,ourselves,out,over,own,same,she,she'd,she'll,she's,should,so,some,such,than,that,that's,the,their,theirs,them,themselves,then,there,there's,these,they,they'd,they'll,they're,they've,this,those,through,to,too,under,until,up,very,was,we,we'd,we'll,we're,we've,were,what,what's,when,when's,where,where's,which,while,who,who's,whom,why,why's,with,would,you,you'd,you'll,you're,you've,your,yours,yourself,yourselves", 'cpseo' ) );

		$custom = Helper::get_settings( 'general.cpseo_stopwords' );
		$custom = Str::to_arr_no_empty( $custom );

		return array_unique( array_merge( $stopwords, $custom ) );
	}

	/**
	 * Filters the category that gets used in the %category% permalink token.
	 *
	 * @param WP_Term $term  The category to use in the permalink.
	 * @param array   $terms Array of all categories (WP_Term objects) associated with the post.
	 * @param WP_Post $post  The post in question.
	 *
	 * @return WP_Term
	 */
	public function post_link_category( $term, $terms, $post ) {
		$primary_term = $this->get_primary_term( $term->taxonomy, $post->ID );

		return false === $primary_term ? $term : $primary_term;
	}

	/**
	 * Filters the permalink for a post of a custom post type.
	 *
	 * @param string  $post_link The post's permalink.
	 * @param WP_Post $post      The post in question.
	 *
	 * @return string
	 */
	public function post_type_link( $post_link, $post ) {
		$taxonomies = Helper::get_object_taxonomies( $post->post_type, 'objects' );
		$taxonomies = wp_filter_object_list( $taxonomies, [ 'hierarchical' => true ], 'and', 'name' );

		foreach ( $taxonomies as $taxonomy ) {
			$find = "%{$taxonomy}%";
			if ( ! Str::contains( $find, $post_link ) ) {
				continue;
			}

			$primary_term = $this->get_primary_term( $taxonomy, $post->ID );
			if ( false !== $primary_term ) {
				// Get the hierachical terms.
				$parents = $this->get_hierarchical_link( $primary_term );

				// Replace the placeholder rewrite tag with hierachical terms.
				$post_link = str_replace( $find, $parents, $post_link );
			}
		}

		return $post_link;
	}

	/**
	 * Auto update the plugin.
	 *
	 * @param bool  $update Whether to update the plugin or not.
	 * @param array $item  The update plugin object.
	 *
	 * @return bool
	 */
	public function auto_update_plugin( $update, $item ) {
		if (
			isset( $item->slug ) &&
			'seo-by-cpseo' === $item->slug &&
			isset( $item->new_version ) &&
			false === stripos( $item->new_version, 'beta' )
		) {
			return true;
		}

		return $update;
	}

	/**
	 * Get chain of hierarchical links.
	 *
	 * @param WP_Term $term The term in question.
	 *
	 * @return string
	 */
	private function get_hierarchical_link( $term ) {
		if ( is_wp_error( $term ) ) {
			return $term->slug;
		}

		$chain = [];
		$name  = $term->slug;
		if ( $term->parent && ( $term->parent !== $term->term_id ) ) {
			$chain[] = $this->get_hierarchical_link( get_term( $term->parent, $term->taxonomy ) );
		}

		$chain[] = $name;
		return implode( '/', $chain );
	}

	/**
	 * Get primary term of the post.
	 *
	 * @param string $taxonomy Taxonomy name.
	 * @param int    $post_id  Post ID.
	 *
	 * @return object|false Primary term on success, false if there are no terms, WP_Error on failure.
	 */
	private function get_primary_term( $taxonomy, $post_id ) {
		$primary = Helper::get_post_meta( "primary_{$taxonomy}", $post_id );
		if ( ! $primary ) {
			return false;
		}

		$primary = get_term( $primary, $taxonomy );
		return is_wp_error( $primary ) ? false : $primary;
	}

	/**
	 * Exclude taxonomies.
	 *
	 * @param array $taxonomies Excluded taxonomies.
	 *
	 * @return array
	 */
	public function default_excluded_taxonomies( $taxonomies ) {
		if ( ! current_theme_supports( 'post-formats' ) ) {
			unset( $taxonomies['post_format'] );
		}
		unset( $taxonomies['product_shipping_class'] );

		return $taxonomies;
	}

	/**
	 * Add rel="nofollow" to a link.
	 *
	 * @param string $link The link as a string.
	 *
	 * @return string
	 */
	public function nofollow_link( $link ) {
		// Check if link is nofollow already.
		if ( strpos( $link, ' rel="nofollow"' ) || strpos( $link, " rel='nofollow'" ) ) {
			return $link;
		}
		return str_replace( '<a ', '<a rel="nofollow" ', $link );
	}

	/**
	 * Add SEO item to admin bar with context-specific submenu items.
	 *
	 * @param WP_Admin_Bar $wp_admin_bar Show/Hide admin bar.
	 */
	public function admin_bar_menu( $wp_admin_bar ) {

		if ( ! Helper::has_cap( 'admin_bar' ) ) {
			return;
		}

		$items      = [];
		$mark_me    = false;
		$post_type  = get_post_type();
		$first_menu = get_transient( 'cpseo_first_submenu_id' );
		$first_menu = $first_menu && 'cpseo' !== $first_menu ? str_replace( 'cpseo-', '', $first_menu ) : '';

		$items['main'] = [
			'id'        => 'cpseo',
			'title'     => '<span class="cpseo-icon">' . $this->get_icon() . '</span><span class="cpseo-text">' . esc_html( 'ClassicPress SEO', 'cpseo' ) . '</span>',
			'href'      => Helper::get_admin_url( $first_menu ),
			'meta'      => [ 'title' => esc_html__( 'ClassicPress SEO Dashboard', 'cpseo' ) ],
			'_priority' => 10,
		];

		if ( current_user_can( 'manage_options' ) ) {
			$items['dashboard'] = [
				'id'        => 'cpseo-dashboard',
				'title'     => esc_html__( 'Dashboard', 'cpseo' ),
				'href'      => $items['main']['href'],
				'parent'    => 'cpseo',
				'meta'      => [ 'title' => esc_html__( 'Dashboard', 'cpseo' ) ],
				'_priority' => 20,
			];
		}

		if ( ! is_admin() ) {
			$this->seo_tools_menu_item( $items );
		}

		if ( Helper::has_cap( 'titles' ) ) {
			if ( is_home() ) {
				$items['local'] = [
					'id'        => 'cpseo-home',
					'title'     => esc_html__( 'Homepage SEO', 'cpseo' ),
					'href'      => Helper::get_admin_url( 'options-titles#setting-panel-homepage' ),
					'parent'    => 'cpseo',
					'meta'      => [ 'title' => esc_html__( 'Edit Homepage SEO Settings', 'cpseo' ) ],
					'_priority' => 35,
				];
			} elseif ( is_singular( Helper::get_accessible_post_types() ) ) {
				$mark_me        = true;
				$object         = get_post_type_object( $post_type );
				$object_type    = 'post';
				$items['local'] = [
					'id'        => 'cpseo-posttype',
					/* translators: Post Type Singular Name */
					'title'     => sprintf( esc_html__( 'SEO Settings for %s', 'cpseo' ), $object->labels->name ),
					'href'      => Helper::get_admin_url( 'options-titles#setting-panel-post-type-' . $post_type ),
					'parent'    => 'cpseo',
					'meta'      => [ 'title' => esc_html__( 'Edit default SEO settings for this post type', 'cpseo' ) ],
					'_priority' => 35,
				];
			} elseif ( ( is_category() || is_tag() || is_tax() ) && in_array( $post_type, Helper::get_accessible_post_types(), true ) ) {
				$mark_me        = true;
				$term           = get_queried_object();
				$labels         = get_taxonomy_labels( get_taxonomy( $term->taxonomy ) );
				$object_type    = 'term';
				$items['local'] = [
					'id'        => 'cpseo-tax',
					/* translators: Taxonomy Singular Name */
					'title'     => sprintf( esc_html__( 'SEO Settings for %s', 'cpseo' ), $labels->name ),
					'href'      => Helper::get_admin_url( 'options-titles#setting-panel-taxonomy-' . $term->taxonomy ),
					'parent'    => 'cpseo',
					'meta'      => [ 'title' => esc_html__( 'Edit SEO settings for this archive page', 'cpseo' ) ],
					'_priority' => 35,
				];
			} elseif ( is_date() ) {
				$items['local'] = [
					'id'        => 'cpseo-date',
					'title'     => esc_html__( 'SEO Settings for Date Archives', 'cpseo' ),
					'href'      => Helper::get_admin_url( 'options-titles#setting-panel-global' ),
					'parent'    => 'cpseo',
					'meta'      => [ 'title' => esc_html__( 'Edit SEO settings for this archive page', 'cpseo' ) ],
					'_priority' => 35,
				];
			} elseif ( is_search() ) {
				$items['local'] = [
					'id'        => 'cpseo-search',
					'title'     => esc_html__( 'SEO Settings for Search Page', 'cpseo' ),
					'href'      => Helper::get_admin_url( 'options-titles#setting-panel-global' ),
					'parent'    => 'cpseo',
					'meta'      => [ 'title' => esc_html__( 'Edit SEO settings for the search results page', 'cpseo' ) ],
					'_priority' => 35,
				];
			}
		}

		if ( is_author() ) {
			$mark_me     = true;
			$object_type = 'user';
		}

		if ( $mark_me && Helper::has_cap( 'onpage_general' ) ) {
			$items['mark'] = [
				'id'        => 'cpseo-mark-me',
				'title'     => esc_html__( 'Mark this page', 'cpseo' ),
				'href'      => '#',
				'parent'    => 'cpseo',
				'_priority' => 100,
			];

			$dashicon_format = '<span class="dashicons dashicons-%s" style="font-family: dashicons; font-size: 19px;"></span>';
			$iscornerstone_check  = '';
			if ( is_singular( Helper::get_accessible_post_types() ) ) {
				if ( get_post_meta( get_the_ID(), 'cpseo_cornerstone_content', true ) === 'on' ) {
					$iscornerstone_check = sprintf( $dashicon_format, 'yes' );
				}
				$items['cornerstone-content'] = [
					'id'        => 'cpseo-cornerstone-content',
					'title'     => $iscornerstone_check . esc_html__( 'As Cornerstone Content', 'cpseo' ),
					'href'      => '#cornerstone_content',
					'parent'    => 'cpseo-mark-me',
					'meta'      => [ 'class' => 'mark-page-as' ],
					'_priority' => 110,
				];
			}

			if ( ! is_admin() && Paper::get() ) {
				$robots            = Paper::get()->get_robots();
				$noindex_check     = in_array( 'noindex', $robots, true ) ? sprintf( $dashicon_format, 'yes' ) : '';
				$items['no-index'] = [
					'id'        => 'cpseo-no-index',
					'title'     => $noindex_check . esc_html__( 'As NoIndex', 'cpseo' ),
					'href'      => '#noindex',
					'parent'    => 'cpseo-mark-me',
					'meta'      => [ 'class' => 'mark-page-as' ],
					'_priority' => 120,
				];

				$nofollow_check     = in_array( 'nofollow', $robots, true ) ? sprintf( $dashicon_format, 'yes' ) : '';
				$items['no-follow'] = [
					'id'        => 'cpseo-no-follow',
					'title'     => $nofollow_check . esc_html__( 'As NoFollow', 'cpseo' ),
					'href'      => '#nofollow',
					'parent'    => 'cpseo-mark-me',
					'meta'      => [ 'class' => 'mark-page-as' ],
					'_priority' => 130,
				];
			}
		}

		/**
		 * Add item to ClassicPress SEO admin bar node.
		 *
		 * @param array $items Array of nodes for menu.
		 */
		$items = $this->do_filter( 'admin_bar/items', $items );

		// Keep original order when uasort() deals with equal "_priority" values.
		$orig_order_counter = 0;
		foreach ( $items as &$item ) {
			$item['_original_order'] = $orig_order_counter++;
		}
		uasort( $items, [ $this, 'sort_admin_bar_items' ] );

		foreach ( $items as $item ) {
			$wp_admin_bar->add_node( $item );
		}
	}

	/**
	 * Third party SEO Tools, like the Google Structured Data Testing Tool.
	 *
	 * @param array $items Array to add menu into.
	 */
	private function seo_tools_menu_item( &$items ) {
		$link_urlencoded = ( ! is_admin() && ! is_preview() ) ? urlencode( Url::get_current_url() ) : '';

		$items['third-party'] = [
			'id'        => 'cpseo-third-party',
			'title'     => esc_html__( 'External Tools', 'cpseo' ),
			'href'      => '#',
			'parent'    => 'cpseo',
			'meta'      => [ 'title' => esc_html__( 'Third Party SEO Tools', 'cpseo' ) ],
			'_priority' => 200,
		];

		$items['third-party-google-structured-data'] = [
			'id'        => 'cpseo-google-structured-data',
			'title'     => esc_html__( 'Google Structured Data', 'cpseo' ),
			'href'      => 'https://search.google.com/structured-data/testing-tool/?url=' . $link_urlencoded,
			'parent'    => 'cpseo-third-party',
			'meta'      => [
				'title'  => esc_html__( 'Google Structured Data Testing Tool', 'cpseo' ),
				'target' => '_blank',
			],
			'_priority' => 210,
		];

		$items['third-party-google-pagespeed'] = [
			'id'        => 'cpseo-google-pagespeed',
			'title'     => esc_html__( 'Google PageSpeed', 'cpseo' ),
			'href'      => 'https://developers.google.com/speed/pagespeed/insights/?url=' . $link_urlencoded,
			'parent'    => 'cpseo-third-party',
			'meta'      => [
				'title'  => esc_html__( 'Google PageSpeed Insights', 'cpseo' ),
				'target' => '_blank',
			],
			'_priority' => 220,
		];

		$items['third-party-google-mobilefriendly'] = [
			'id'        => 'cpseo-google-mobilefriendly',
			'title'     => esc_html__( 'Google Mobile-Friendly', 'cpseo' ),
			'href'      => 'https://search.google.com/test/mobile-friendly?url=' . $link_urlencoded,
			'parent'    => 'cpseo-third-party',
			'meta'      => [
				'title'  => esc_html__( 'Google Mobile-Friendly Test', 'cpseo' ),
				'target' => '_blank',
			],
			'_priority' => 230,
		];

		$items['third-party-google-richresults-mobile'] = [
			'id'        => 'cpseo-google-richresults-mobile',
			'title'     => esc_html__( 'Google Rich Results (Mobile)', 'cpseo' ),
			'href'      => 'https://search.google.com/test/rich-results?url=' . $link_urlencoded . '&user_agent=1',
			'parent'    => 'cpseo-third-party',
			'meta'      => [
				'title'  => esc_html__( 'Google Rich Results Test - Googlebot Smartphone', 'cpseo' ),
				'target' => '_blank',
			],
			'_priority' => 240,
		];

		$items['third-party-google-richresults-desktop'] = [
			'id'        => 'cpseo-google-richresults-desktop',
			'title'     => esc_html__( 'Google Rich Results (Desktop)', 'cpseo' ),
			'href'      => 'https://search.google.com/test/rich-results?url=' . $link_urlencoded . '&user_agent=2',
			'parent'    => 'cpseo-third-party',
			'meta'      => [
				'title'  => esc_html__( 'Google Rich Results Test - Googlebot Desktop', 'cpseo' ),
				'target' => '_blank',
			],
			'_priority' => 250,
		];

		if ( ! is_admin() && ! is_preview() ) {
			$items['third-party-google-cache'] = [
				'id'        => 'cpseo-google-cache',
				'title'     => esc_html__( 'Google Cache', 'cpseo' ),
				'href'      => 'https://webcache.googleusercontent.com/search?q=cache:' . $link_urlencoded,
				'parent'    => 'cpseo-third-party',
				'meta'      => [
					'title'  => esc_html__( 'See Google\'s cached version of your site', 'cpseo' ),
					'target' => '_blank',
				],
				'_priority' => 260,
			];
		}

		$items['third-party-fb-debugger'] = [
			'id'        => 'cpseo-fb-debugger',
			'title'     => esc_html__( 'Facebook Debugger', 'cpseo' ),
			'href'      => 'https://developers.facebook.com/tools/debug/sharing/?q=' . $link_urlencoded,
			'parent'    => 'cpseo-third-party',
			'meta'      => [
				'title'  => esc_html__( 'Facebook Sharing Debugger', 'cpseo' ),
				'target' => '_blank',
			],
			'_priority' => 270,
		];
	}

	/**
	 * Sort admin bar items callback.
	 *
	 * @param array $item1 Item A to compare.
	 * @param array $item2 Item B to compare.
	 *
	 * @return integer
	 */
	public function sort_admin_bar_items( $item1, $item2 ) {
		if ( ! isset( $item1['_priority'] ) || ! isset( $item2['_priority'] ) || $item1['_priority'] === $item2['_priority'] ) {
			return $item1['_original_order'] < $item2['_original_order'] ? -1 : 1;
		}
		return $item1['_priority'] < $item2['_priority'] ? -1 : 1;
	}

	/**
	 * AJAX function to mark page as Cornerstone Content/Noindex/Nofollow.
	 */
	public function mark_page_as() {
		check_ajax_referer( 'cpseo-ajax-nonce', 'security' );
		$this->has_cap_ajax( 'onpage_general' );

		$what        = Param::post( 'what' );
		$object_id   = Param::post( 'objectID' );
		$object_type = Param::post( 'objectType' );

		if ( ! $what || ! $object_id || ! $object_type || ! in_array( $what, [ 'cornerstone_content', 'noindex', 'nofollow' ], true ) ) {
			return 0;
		}

		if ( 'cornerstone_content' === $what ) {
			$current = $this->get_meta( $object_type, $object_id, 'cpseo_cornerstone_content' );
			$updated = 'on' === $current ? 'off' : 'on';
			$this->update_meta( $object_type, $object_id, 'cpseo_cornerstone_content', $updated );
			die( '1' );
		}

		if ( 'noindex' === $what || 'nofollow' === $what ) {
			$robots = (array) $this->get_meta( $object_type, $object_id, 'cpseo_robots' );
			$robots = array_filter( $robots );

			Arr::add_delete_value( $robots, $what );
			$robots = array_unique( $robots );

			$this->update_meta( $object_type, $object_id, 'cpseo_robots', $robots );
			die( '1' );
		}

		die();
	}

	/**
	 * AJAX function to generate overlay image. Used in social thumbnails.
	 */
	public function generate_overlay_thumbnail() {
		$thumbnail_id  = Param::request( 'id', 0, FILTER_VALIDATE_INT );
		$type          = Param::request( 'type', 'play' );
		$overlay_image = Helper::choices_overlay_images()[ $type ]['url'];
		$image         = wp_get_attachment_image_src( $thumbnail_id, 'full' );

		if ( ! empty( $image ) ) {
			$this->create_overlay_image( $image[0], $overlay_image );
		}
		die();
	}

	/**
	 * Create Overlay Image.
	 *
	 * @param string $image_file    The permalink generated for this post by WordPress.
	 * @param string $overlay_image The ID of the post.
	 */
	public function create_overlay_image( $image_file, $overlay_image ) {
		$image_format = pathinfo( $image_file, PATHINFO_EXTENSION );
		if ( ! in_array( $image_format, [ 'jpg', 'jpeg', 'gif', 'png' ], true ) ) {
			return;
		}
		if ( 'jpg' === $image_format ) {
			$image_format = 'jpeg';
		}

		$imagecreatef = 'imagecreatefrom' . $image_format;
		$stamp        = imagecreatefrompng( $overlay_image );
		$image        = $imagecreatef( $image_file );

		// Set the margins for the stamp and get the height/width of the stamp image.
		$img_width     = imagesx( $stamp );
		$img_height    = imagesy( $stamp );
		$margin_right  = round( abs( imagesx( $image ) - $img_width ) / 2 );
		$margin_bottom = round( abs( imagesy( $image ) - $img_height ) / 2 );

		// Copy the stamp image onto our photo using the margin offsets and the photo width to calculate positioning of the stamp.
		imagecopy( $image, $stamp, $margin_right, $margin_bottom, 0, 0, $img_width, $img_height );

		// Output and free memory.
		header( 'Content-type: image/png' );
		imagepng( $image );
		imagedestroy( $image );
	}

	/**
	 * Get ClassicPress SEO icon.
	 *
	 * @param integer $width Width of the icon.
	 *
	 * @return string
	 */
	private function get_icon( $width = 20 ) {
		// feather-white.svg
		return '<svg viewBox="0 0 46.29 46.29" xmlns="http://www.w3.org/2000/svg" width="' . $width . '"><g fill="#fff"><path d="M46.13.44h0A1,1,0,0,0,45.27,0C39.4.31,30,3.77,29.56,3.92a.94.94,0,0,0-.53.47L27.7,7.05l-1-1a1,1,0,0,0-1.13-.17c-1.12.58-6.8,3.59-8,5.06A12.07,12.07,0,0,0,16,15.32L15.33,14a1,1,0,0,0-.68-.52.93.93,0,0,0-.82.22c-.34.3-7.43,6.68-5.95,14.63A59.31,59.31,0,0,1,31.51,8a1,1,0,0,1,1.29.44,1,1,0,0,1-.44,1.29h0c-.65.32-1.28.65-1.9,1L30,11c-.48.25-.95.51-1.4.78l-.45.25q-1.77,1-3.39,2.13l-.26.18c-.47.32-.93.65-1.38,1l-.24.17C12.36,23.22,6.79,33.06.13,44.85a1,1,0,0,0,.36,1.31.9.9,0,0,0,.47.13H1a1,1,0,0,0,.84-.49c2.66-4.7,5.14-9.08,7.83-13.13a5.48,5.48,0,0,0,4.48,2c7.29,0,19.33-10.67,20.55-14.11a.94.94,0,0,0-.06-.77,1,1,0,0,0-.62-.48l-3.21-.81,7-1.16a1,1,0,0,0,.7-.52L46.18,1.4a.94.94,0,0,0,0-1"/></g></svg>';
	}
}
